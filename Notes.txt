Here is my question though, then what is the point of the safe thread vs the unsafe
thread? what does that lock do? And also if I just create 5 instances of unsafe thread
and pass each one into the Threads, that will work the same way too correct? Or isnt the
point of the lab to only create one instance of unsafe and use it for each thread to test
concurency issues? Or am i wrong?
ChatGPT
In the context of your exercise involving SafeCopier and UnsafeCopier, the main distinction
between the two classes lies in how they handle concurrency issues.

UnsafeCopier: This class represents a scenario where threads (monkeys) operate on the same
resource (the copier) without any synchronization (locking). This can lead to concurrency
issues such as data corruption or inconsistent states because multiple threads can modify the
 shared resource simultaneously without any control. Testing this class allows you to observe
 potential problems with concurrent access to a shared resource.

SafeCopier: This class introduces synchronization (locking) to ensure that only one thread at a
 time can modify the shared resource. This is achieved using a lock (typically from java.util.
 concurrent), which provides exclusive access to the shared resource while a thread is modifying
 it. This prevents concurrency issues and ensures that the shared resource remains consistent.
 Testing this class demonstrates the correct approach to handle concurrency safely.

The point of the lab is to highlight the differences between these two approaches and to show the
importance of using locks when dealing with shared resources in a concurrent environment.

If you create five instances of UnsafeCopier and pass each one to a different thread, each thread
will operate independently with its own instance of UnsafeCopier. This avoids the concurrency
issues associated with shared resources, which defeats the purpose of testing UnsafeCopier in a
concurrent context.

The goal of using one instance of UnsafeCopier for all threads is to observe how concurrent
access to the same resource can lead to problems, such as race conditions or data corruption.
This helps to emphasize the importance of synchronization (as demonstrated by SafeCopier) in
concurrent programming.

To sum up:

UnsafeCopier should use one instance across multiple threads to test concurrency issues and
observe problems with unsynchronized access.
SafeCopier demonstrates how to properly synchronize access to a shared resource to prevent
concurrency issues.

The Thread.sleep() part in the main method serves as a pause or delay between the time the
monkeys finish copying and when the copied versions are printed out. Let's break down why
 it's used:

Joining Threads:

Before the Thread.sleep() part, the main method is joining (waiting for) the monkey threads
 to finish their execution using the join() method.
The join() method ensures that the main thread (in this case, the main method) waits for
 each monkey thread to finish executing before moving on to the next step.
By joining the monkey threads, the main thread ensures that it doesn't proceed to print the
 copied versions until all monkeys have completed their copying tasks.
Printing Copied Versions:

After the monkey threads have finished their tasks, the main thread proceeds to print out
 the copied versions.
Without any delay, the main thread might print the copied versions immediately after starting
 the monkey threads, even before they have finished copying.
The Thread.sleep(1000) part introduces a 1-second delay, giving enough time for the monkey
threads to complete their tasks before printing the copied versions.
Handling Interruptions:

The Thread.sleep() method can throw an InterruptedException, which is why it's wrapped in a
 try-catch block.
In case an interruption occurs while the main thread is sleeping, the catch block handles
the exception by printing "MAIN INTERRUPTED".
In summary, the Thread.sleep() part ensures that the main thread waits for the monkey threads
 to finish executing before printing out the copied versions. It introduces a short delay to
  allow all monkey threads to complete their tasks before proceeding with the next step.



